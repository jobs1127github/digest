Tomcat是我们经常使用的 servlet容器之一，甚至很多线上产品都使用 Tomcat充当服务器。
 而且优化后的Tomcat性能提升显著。
 
cmd tomcat bin/ 运行catalina debug 观察启动情况


  一、内存优化
  	 默认情况下Tomcat的相关内存配置较低，这对于一些大型项目显然是不够用的，这些项目运行就已经耗费了大部分内存空间，何况大规模访问的情况。即使是本文中的这个只有一个页面的超小项目，在并发达到一定程度后也会抛出以下类似异常：
严重: Exception invoking periodic operation: java.lang.OutOfMemoryError: Java heap space  严重: Error processing request java.lang.OutOfMemoryError: GC overhead limit exceeded;说明Tomcat已经无力支持访问处理，内部GC也已经“无能无力”。所以一般情况下我们需要重新配置Tomcat的相关内存大小。

	修改内存等 JVM相关配置
	windows下修改TOMCAT_HOME/bin/catalina.bat，在第一行加入如下代码：
	set JAVA_OPTS=-server -Xms1024m -Xmx1024m -XX:MaxNewSize=1024m -XX:PermSize=512m -XX:MaxPermSize=512m 
这里要注意，服务器内存空间是否足够大，按照具体实际的内存空间来设置
 	
-server：启用 JDK的 server 版本；
-Xms：Java虚拟机初始化时堆的最小内存，一般与 Xmx配置为相同值，这样的好处是GC不必再为扩展内存空间而消耗性能；
-Xmx：Java虚拟机可使用堆的最大内存；
-XX:PermSize：JVM初始分配的非堆内存；
-XX:MaxPermSize：JVM最大允许分配的非堆内存，按需分配；
-XX:MaxNewSize=512m JVM堆区域新生代内存的最大可分配大小(PermSize不属于堆区)
	
以windows为例： 在特定的域中，修改startWeblogic.bat文件，在JAVA_OPTIONS后面加入-Djava.awt.headless=true.  否则会出现sun/awt/X11GraphicsEnviroment无法找到的错误 


二、配置优化
	1.Connector 优化
Connector是连接器，负责接收客户的请求，以及向客户端回送响应的消息。所以 Connector的优化是重要部分。默认情况下 Tomcat只支持200线程访问，超过这个数量的连接将被等待甚至超时放弃，所以我们需要提高这方面的处理能力。
	修改这部分配置需要修改TOMCAT_HOME/conf/server.xml，打开server.xml找到Connector 标签项
其中port代表服务接口；protocol代表协议类型；connectionTimeout代表连接超时时间，单位为毫秒；redirectPort代表安全通信（https）转发端口，一般配置成443。
	优化后的配置：
	<Connector port="80"   
          protocol="org.apache.coyote.http11.Http11NioProtocol"
          maxThreads="1000"   
          minSpareThreads="100"   
          acceptCount="1000"  
          maxConnections="1000"  
          connectionTimeout="20000"   
          maxHttpHeaderSize="8192"  
          tcpNoDelay="true"  
          compression="on"  
          compressionMinSize="2048"  
          disableUploadTimeout="true"  
          redirectPort="8443"  
      	  enableLookups="false"  
          URIEncoding="UTF-8" />  
NIO：NIO(New I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。
默认配置：protocol="HTTP/1.1"
可选项配置：protocol="org.apache.coyote.http11.Http11Nio2Protocol" 
可选项配置：protocol="org.apache.coyote.http11.Http11AprProtocol" 
//BIO  
protocol="HTTP/1.1"  
//NIO  
protocol="org.apache.coyote.http11.Http11NioProtocol"  
//NIO2  
protocol="org.apache.coyote.http11.Http11Nio2Protocol"  
//APR  
protocol="org.apache.coyote.http11.Http11AprProtocol"  

maxThreads：由该连接器创建的处理请求线程的最大数目，也就是可以处理的同时请求的最大数目。如果未配置默认值为200。 maxThreads是一个重要的配置属性，maxThreads配置的合理直接影响了Tomcat的相关性能，maxThreads并不是配置的越大越好，事实上你即使配置成999999也是没有用的，因为这个最大值是受操作系统及相关硬件所制约的，并且最大值并不一定是最优值，所以我们追寻的应该是最优值而不是最大值。
minSpareThreads：线程的最小运行数目，这些始终保持运行。如果未指定，默认值为10。
acceptCount：当所有可能的请求处理线程都在使用时传入连接请求的最大队列长度。如果未指定，默认值为100。一般是设置的跟 maxThreads一样或一半，此值设置的过大会导致排队的请求超时而未被处理。所以这个值应该是主要根据应用的访问峰值与平均值来权衡配置。
maxConnections：在任何给定的时间内，服务器将接受和处理的最大连接数。当这个数字已经达到时，服务器将接受但不处理，等待进一步连接。NIO与NIO2的默认值为10000，APR默认值为8192。
connectionTimeout：当请求已经被接受，但未被处理，也就是等待中的超时时间。单位为毫秒，默认值为60000。通常情况下设置为30000。
maxHttpHeaderSize：请求和响应的HTTP头的最大大小，以字节为单位指定。如果没有指定，这个属性被设置为8192（8 KB）。
tcpNoDelay：如果为true，服务器socket会设置TCP_NO_DELAY选项，在大多数情况下可以提高性能。缺省情况下设为true

2、线程池优化
Executor代表了一个线程池，可以在Tomcat组件之间共享。使用线程池的好处在于减少了创建销毁线程的相关消耗，而且可以提高线程的使用效率。	
 	要想使用线程池，首先需要在 Service标签中配置 Executor，如下：
	<Executor name="tomcatThreadPool"   
         namePrefix="catalina-exec-"   
         maxThreads="1000"   
         minSpareThreads="100"  
         maxIdleTime="60000"  
         maxQueueSize="Integer.MAX_VALUE"  
         prestartminSpareThreads="false"  
         threadPriority="5"  
         className="org.apache.catalina.core.StandardThreadExecutor"/> 

其中，
name：线程池名称，用于 Connector中指定。
namePrefix：所创建的每个线程的名称前缀，一个单独的线程名称为 namePrefix+threadNumber。
maxThreads：池中最大线程数。
minSpareThreads：活跃线程数，也就是核心池线程数，这些线程不会被销毁，会一直存在。
maxIdleTime：线程空闲时间，超过该时间后，空闲线程会被销毁，默认值为6000（1分钟），单位毫秒。
maxQueueSize：在被执行前最大线程排队数目，默认为Int的最大值，也就是广义的无限。除非特殊情况，这个值不需要更改，否则会有请求不会被处理的情况发生。
prestartminSpareThreads：启动线程池时是否启动 minSpareThreads部分线程。默认值为false，即不启动。
threadPriority：线程池中线程优先级，默认值为5，值从1到10。
className：线程池实现类，未指定情况下，默认实现类为org.apache.catalina.core.StandardThreadExecutor。如果想使用自定义线程池首先需要实现 org.apache.catalina.Executor接口。

3、Listener
	另一个影响Tomcat 性能的因素是内存泄露。Server标签中可以配置多个Listener，其中 JreMemoryLeakPreventionListener是用来预防JRE内存泄漏。此Listener只需在Server标签中配置即可，默认情况下无需配置，已经添加在 Server中。





一台电脑同时配置2个tomcat 
    1.使用压缩版的tomcat不能使用安装版的。 
    2.第一个tomcat的配置不变。 
    3.增加环境变量CATALINA_HOME2，值为新的tomcat的地址；增加环境变量CATALINA_BASE2，值为新的tomcat的地址。
    4.修改新的tomcat中的startup.bat，把其中的CATALINA_HOME全部修改为CATALINA_HOME2。 
    5.修改新的tomcat中的catalina.bat，把其中的CATALINA_HOME改为CATALINA_HOME2，CATALINA_BASE改为CATALINA_BASE2。 
    6.修改conf/server.xml文件： 
    6.1 <Server port="8005" shutdown="SHUTDOWN"> 此端口改为8006
    6.2 <Connector port="8080" maxHttpHeaderSize="8192"  
          maxThreads="150" minSpareThreads="25" maxSpareThreads="75"  
          enableLookups="false" redirectPort="8443" acceptCount="100"  
          connectionTimeout="20000" disableUploadTimeout="true" /> 把8080端口改为没有是使用的端口，如8888。
    6.3<Connector port="8009"  
          enableLookups="false" redirectPort="8443" protocol="AJP/1.3" />此端口改为8010
    7  成功！

